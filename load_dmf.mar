	.SUBTITLE	warnnings
; Notes: This module uses some macros and routines which are usually used by
; device drivers (DSBINT, ENBINT, EXE$ALONONPAGED). Thus, the device's drivers
; guide should be consulted before any system upgrade. See also the I/O guide
; the section that talks about the synchronous line of DMF (currently it is
; part 2, section 2).
;
	.TITLE	LOAD_DMF Framing routine for DMF sync port.
	.IDENT	/V1.0/
;
	.LIBRARY	/SYS$LIBRARY:LIB/
	$XGDEF			; Define the symbols for XG$...
;
	.GLOBAL	DMF_FRAME, DMF_FRAME_END, LOAD_DMF
	.GLOBL	EXE$ALONONPAGED
;
	.SUBTITLE	Constants.
;
; EBCDIC characters we need (in decimal notation).
$EQU	SOH	1.
$EQU	STX	2.
$EQU	DLE	16.
$EQU	ETB	38.
$EQU	NAK	61.
$EQU	ACK0	112.
;
; Our offsets in the context longwords:
$EQU	DLE_FOUND	16.		; DLE was the previous character.
$EQU	M_DLE_FOUND	65536.		; The mask for it.
$EQU	NOT_FIRST_CHAR	31.		; Not the first character in the frame.
;
	.SUBTITLE	Framing routine.
; For refference about this routine, look in the guide which describes the DMF
; synchronous line (I/O guide, part 2, chapter 2).
; This routine gets the inout frame from the NJE line. It has to decide when
; a frame is over. Thus when a new frame comes, it starts analizing it.
; R0 contains on input an address of a quadword. This address is zeroed when
; a frame is ended, thus if it is zero we know we are on a new frame. Then we
; set a bit to signal that the next characters are inside a frame. (the check
; as described in the book of high-order bit set in first character didn't
; work). We have 4 types of frames:
; DLE + ACK0
; SOH + ENQ
; NAK
; DLE + STX; This is the most complicated since we must search for DLE+ETB
;            and then to accumulate 2 CRC characters.
;
; The context quadword (whose address is passed in R0) is used to save our
; status. It's low byte is used to count the CRC characters (0 - no CRC's yet,
; non-zero - we accumulate now the CRC characters). Other two bits in the
; first longword are used to signal whether we start a new frame or not, and
; whether the previous character was a DLE.
;
DMF_FRAME::
	MOVL	R2, -(SP)		; Save R2
	MOVL	R0, R2			; R2 now holds the address of quadword
					; context.
	CLRL	R0			; Default - queue character.
	BBCS	#NOT_FIRST_CHAR, -
		(R2), 1$		; Our context is zeroed each time
					; after a frame is ended.
	TSTB	(R2)			; If positive - we are counting the
					; CRC's now.
	BEQL	12$			; Zero - check character.
; It was positive - we now count the CRC characters.
	INCB	(R2)			; Increment count.
	CMPB	#3, (R2)		; All received?
	BNEQ	OUT			; No - buffer character and continue
; Count reached - end of frame.
	MOVL	#XG$M_COMPLETE_READ, R0
	BRB OUT
; Check first whether previous character was DLE. If so, this character has
; different meanning.
12$:	BBCC	#DLE_FOUND, (R2), 10$	; Was the previous character a DLE?
; It was a DLE - act accordingly.
	CMPB	#ACK0, R1		; Is the character ACK?
	BNEQ	11$
	MOVL	#XG$M_COMPLETE_READ, R0	; Yes - End of frame.
	BRB	OUT
11$:	CMPB	#ETB, R1		; ETB?
	BNEQ	13$
	MOVB	#1, (R2)		; Start CRC characters count.
	BRB	OUT
13$:    CMPB	#DLE, R1		; Second DLE ?
	BEQL	OUT			; Yes - The bit was cleared and all ok.
10$:	CMPB	#DLE, R1		; Is this character a DLE?
	BNEQ	OUT			; No - buffer it.
	BISL2	#M_DLE_FOUND, (R2)	; Yes - set the bit.
	BRB	OUT
;
; First frame - check which frame it might be.
1$:	CLRB	(R2)
100$:	CMPB	#NAK, R1		; NAK is a single-char block.
	BNEQ	2$
	MOVL	#XG$M_COMPLETE_READ, R0
	BRB	OUT
2$:	CMPB	#SOH, R1		; SOH-ENQ. Use the CRC count to effect
					; end of frame on next character.
	BNEQ	3$
	MOVB	#2, (R2)
	BRB	OUT
3$:	CMPB	#DLE, R1
	BNEQ	4$
	BISL2	#M_DLE_FOUND, (R2)	; Set the upper bit because we had DLE.
	BRB	OUT
; Illegal character - end the sequence.
4$:	MOVL	#XG$M_COMPLETE_READ, R0
	BRB	OUT
;
OUT:	MOVL	(SP)+, R2		; Restore R2.
	RSB
DMF_FRAME_END:				; The address of end of routine.
;
	.SUBTITLE	Loading routine (C entry point).
; This routine loads the DMF framing routine into non-pages memory. If the
; load is successfull, R0 holds the virtual address. If not, R0 is zero.
	.ENTRY	LOAD_DMF, ^M<R2,R3>
	MOVL	R1, -(SP)		; Save R1 (can't be specified in mask).
	$CMKRNL_S -			; Must execute in kernel mode.
		ROUTIN = DMF_K_LOAD
; Output is returned in R2.
	MOVL	(SP)+, R1		; Restore it.
; Test the return code from $CMKRNL
	MOVL	STORE, R2
	MOVL	STATUS, R0
	BLBS	R0, 1$			; Success, jump.
	CLRL	R2			; Error - Clear the address to signal it.
1$:	MOVL	R2, R0			; For C to be able to access it.
	RET
;
;
;
	.SUBTITLE	Kernel mode loading routine.
	.ENTRY	DMF_K_LOAD, ^M<R4,R5>
	DSBINT	IPL = #2		; Raise IPL to 2, To prevent STOP/ID
	MOVL	#DMF_FRAME_END - DMF_FRAME + 12.,  R1	; Size of routine + header
	MOVL	R1, -(SP)		; Save it.
	JSB	G^EXE$ALONONPAGED	; Allocate the non-paged memory.
	MOVL	R0, STATUS
	MOVL	(SP)+, R1		; Restore original value.
	BLBS	R0, 1$			; Success - jump.
	CLRL	R2			; Error - Clear the address.
	BRB	2$			; Decrease IPL and exit...
; Copy the routine into the non-paged pool.
1$:	ADDL3	#12., R2, (R2)+		; Header - Buffer address.
	CLRL	(R2)+			; Header - Zero user's buffer address
	MOVL	R1, (R2)+		; Size of packet.
	MOVL	R2, STORE		; Save address of our data.
	MOVAB	DMF_FRAME, R4		; Where from
	MOVL	R2, R5			; Where to
	SUBL	#12., R1		; Reduce the header size
; Use MOVB to simplify length count calcs. Anyway, it is executed only once
; every system startup.
10$:	MOVB	(R4)+, (R5)+
	SOBGTR	R1, 10$
; Copy completed.
2$:	ENBINT				; Return back to previous IPL.
	RET
;
STORE::	.LONG	0
STATUS:: .LONG	0
	.END
