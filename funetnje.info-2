This is Info file funetnje.info, produced by Makeinfo-1.55 from the
input file funetnje.texinfo.

   This file documents FUNET-NJE version 3.0, which implements
BITNET-II -type BITNET node-to-node connectivity on UNIX systems.

   Copyright (C) 1994 Finnish University and Research Network, FUNET.

   Copyright (C) 1994 IBiS Support/Matti Aarnio

   Permission is granted to copy and use this material for
non-commercial use without prior agreenment.


File: funetnje.info,  Node: namesfilter,  Next: njeroutes,  Prev: ucp,  Up: System programs

`namesfilter' - Mailer route extractor from `BITEARN.NODES' file
================================================================

     Synopsis:
       namesfilter:  Filters `BITEARN.NODES' data to mailer databases
          namesfilter -zmailer  < bitearn.nodes > bitnet.routes
          namesfilter -sendmail < bitearn.nodes > bitnet.routes
          namesfilter -smail    < bitearn.nodes > bitnet.routes

   This utility parses `BITEARN.NODES'-file, and from it all the
`*:type.NJE*' entries are checked up for possible
`*:servers*.*'-entries, which define mailers.  Of those, only one can
exist without "OUTONLY"-tag, and it defines the receiving mailer.

   If no non-"OUTONLY" `*:servers*.*' are defined, default mode of
"*defrt1*" is used, othervice some smarter version is chosen.

   Originally this utility was written for ZMailer usage, other modes
are "afterthoughts"...


File: funetnje.info,  Node: njeroutes,  Next: netinit,  Prev: namesfilter,  Up: System programs

`njeroutes' - Route-database generator program
==============================================

     Synopsis:
       njeroutes  header.file routes.file output.file

   This program generates local *BINTREE* copy of the route database
from couple input files.  Runtime system uses the produced file to look
up the NJE routes.


File: funetnje.info,  Node: netinit,  Next: acctcat,  Prev: njeroutes,  Up: System programs

`netinit.sh' - Automatic route-updater
======================================

   `netinit.sh' is a small script which can be run from `cron' to
facilitate automatic system maintance.

   The sample version of it queries pseudo-user `NETINIT's reader and
if it find there `FINFILES.NETINIT', or  `BITEARN.NODES', it processes
them for routes (NETINIT), and ZMailer BITNET email routing database
(ROUTES).

   Sample output below (May-1995 route-db)

     FINFILES.NETINIT: .../bitspool/NETINIT/0001 NETDATA NETSERV@FINHUTC   \
                                          NETINIT@FINFILES FINFILES.NETINIT N
     Ndparse ok, generating routes..
     Records read:
     Processing routing table
     100 200 300 400 500 600 700 800 900 1000
     1100 1200 1300 1400 1500 1600 1700 1800 1900 2000
     2100
     Total records inserted: 2136, 0 duplicates in DUPLICATE.TMP


File: funetnje.info,  Node: acctcat,  Prev: netinit,  Up: System programs

`acctcat' - Utility to dump the RSCS-accounting records
=======================================================

     Synopsis:
       acctcat /path/to/rscs/acct-file

   UNIX-program that is able to dump VM/CMS RSCS-accounting records into
ASCII format. (For various reasons that format was chosen as the
accounting format of the FUNET-NJE as well.)


File: funetnje.info,  Node: Interfacing mailer,  Next: Nuts and Bolts,  Prev: System programs,  Up: Top

Interfacing Zmailer/smail/sendmail with FUNET-NJE
*************************************************

   Here are some instructions on how to interface various MTA-systems
into the *FUNET-NJE* package.

   There is a separate program (*mailify*) responsible for incoming
email processing, these are routers, and senders of BITNET email
(*bmail*), and there is route database generator for generating the
necessary  *nodename->route*  mapping (*namesfilter*).

* Menu:

* Zmailer::     Interfacing Toronto/FUNET Zmailer
* smail::       Interfacing smail3.0
* sendmail::    Interfacing BSD sendmail


File: funetnje.info,  Node: Zmailer,  Next: smail,  Up: Interfacing mailer

Interfacing Toronto/FUNET Zmailer with FUNET-NJE
================================================

   Doing this interface was easy due to vast amounts of easy to
understand configurability of the *Zmailer*(1) system.

   Depending on if the system is to be a smart-mailer, or not,
Zmailer's `router.cf' shall contain transport preference definition:
     # The transport preference order
     protocols='routes smtp usenet bitnet'
   which instructs it to include those four protocols into the
route-analysis. The protocols are attempted in given order!  Host
BITNET name must be defined in `/etc/name.bitnet' for Zmailer's
BITNET-protocol.

   If it is desirable *not to* have smart BITNET routing at the system,
it is possible to use lazy-routing of all "*.BITNET"-addresses into one
system somewhere else with following definition in `/etc/mail.conf':
     ...
     # rrouter.cf uses these..  Uncomment for use
     # : ${BITNETACTION:="bsmtp3nd mailer@searn"}
     # : ${BITNETACTION:="smtp figbox.funet.fi"}
   the first  one uses special delivery via BITNET facilities to
MAILER@SEARN, the second uses ordinary SMTP.

   BITNET email routing database (`$MAILVAR/db/routes.bitnet') contains
entries like:
     academic         bsmtp3!mailer!academic
     acmvm            bsmtp3!mailer!acmvm
     acusd            defrt1!acusd
     ...
     searn            bsmtp3nd!mailer!searn
     ...
   which essentially mean:
*academic*
     Use *bsmtp3*-channel, and send it to *mailer@academic*

*acusd*
     Use *defrt1*-channel, and send mail do *$user@acusd*

*searn*
     Use *bsmtp3nd*-channel (bsmtp3 in NETDATA instead of PUNCH), and
     send it to *mailer@searn*

   That email routing database is built from `BITEARN NODES'-file by
use of `namesfilter' -program:
     # ./namesfilter -zmailer < bitearn.nodes | sort > routes.bitnet
   Unlike the original Toronto `namesfilter'-package, this does not
take `BITEARN DOMAINS', or `XMAILER NAMES'.

   Channels are defined in `$MAILSHARE/scheduler.conf', in which these
five are defined as:
     ...
     defrt1/*
             command="sm -c $channel defrt1"
     bsmtp3/*
             command="sm -c $channel bsmtp3"
     bsmtp3rfc/*
             command="sm -c $channel bsmtp3rfc"
     bsmtp3nd/*
             command="sm -c $channel bsmtp3nd"
     bsmtp3ndrfc/*
             command="sm -c $channel bsmtp3ndrfc"
   Meaning they all are run via `sendmail-compatible transporter'.

   Configuration of the `sendmail-compatible transporter' at
`$MAILSHARE/sm.conf' contains these five entries for the BITNET:
     ...
     #
     # bitnet stuff F=hu not set
     #
     bsmtp3      snmSX /usr/local/lib/nje/bmail bmail -b $h -u MAILER $g $u
     bsmtp3rfc   snmSX /usr/local/lib/nje/bmail bmail -b $h -u MAILER $g $u
     bsmtp3nd    snmSX /usr/local/lib/nje/bmail bmail -nd $h -u MAILER $g $u
     bsmtp3ndrfc snmSX /usr/local/lib/nje/bmail bmail -nd $h -u MAILER $g $u
     defrt1      snS   /usr/local/lib/nje/bmail bmail $g $u

   ---------- Footnotes ----------

   (1) Zmailer is a mailer running in two modes with multiple programs
doing their parts; `router' (1 to many) doing email address routing,
`scheduler' running transport channels, like `smtp', `mailbox' (local
delivery), etc.  There are also incoming channel programs `smtpserver',
and compability interface `/usr/lib/sendmail'.

   The Zmailer is available from
ftp://ftp.funet.fi/pub/unix/mail/zmailer/zmailer-*vers*-*datecode*.tar.gz,
via anonymous FTP.


File: funetnje.info,  Node: smail,  Next: sendmail,  Prev: Zmailer,  Up: Interfacing mailer

Interfacing Smail3.0 with FUNET-NJE
===================================

   *This information is from Gerald Hanusch
<root@alijku65.edvz.uni-linz.ac.at>*

   *Relevant files are on subdirectory `smail-configs/' of the source
directory.*

   In order to get SMAIL3.1.28 working with the FUNET-NJE emulator,
following steps are necessary:

  1. Copy the BSMTP3, BSMTP3ND and DEFRT1 BASH scripts to your
     SMAIL-LIBDIR, e.g. `/usr/local/lib/smail/'

  2. Edit these 3 Scripts to fit your nje emulator installation, mainly
     the path to the `bmail' program coming with the emulator needs to
     be set properly.

  3. If you don't use a `routers' and `transports' file till now,
     because the compiled in defaults of SMAIL fit your needs, make a
     copy of these files to the SMAIL-LIBDIR.  The source distribution
     of SMAIL comes with generic samples, which reflect the compiled-in
     configuration.

  4. Make an entry to `routers' file like below. Commonly between the
     entry which defines the `path' router and the `uucp-neighbors'
     router with the following lines

          bitnet: driver=pathalias,
                  method=bitmethods;
                  file=bitearn,
                  proto=bsearch,
                  -optional,
                  -required,
                  domain=bitnet,

     The position of the entries within `routers' file is significant.
     The decision, which path is taken, depends mainly on this position.
     Please consult the SMAIL doc, resp. man 5 smail for more info on
     this.

  5. Make a directory `methods' within SMAIL-LIBDIR.  Copy the supplied
     `bitmethods' file into there.

     Edit or generate a bitnet mailers routing table, and copy it to
     SMAIL-LIBDIR.  It can be built from `BITEARN NODES'-file by use of
     `namesfilter'-program:
          # ./namesfilter -smail < bitearn.nodes | sort > routes.bitnet

     The table has the common pathalias format with following entries:
             destdomain   transportmethod!mailername!nodename!%s

     where *destdomain* is the domain within bitnet, *transportmethod*
     is either bsmtp3, bsmtp3nd or defrt1, *mailername* is the name of
     the remote mailer userid which receives email from bitnet, and
     *nodename* is the bitnet node running the mailer

     The `*%s* behind the *nodename* is not needed for our purposes,
     but is necessary to pass the syntax check. The meaning of the 3
     transport methods is described in `bmail(8)' utility.

  6. Edit the `transports' file in SMAIL-LIBDIR by adding the entries
     bstmp3, bsmtp3nd, and defrt1.  A sample is provided with the nje
     emulator package.

  7. Add to your SMAIL - `config' file to the *domains=*-line an entry
     for *bitnet*, separated by a ":"

  8. If the packages installed properly, reload smail configuration.
     Now it should be possible to deliver mail within BITNET using nje.



File: funetnje.info,  Node: sendmail,  Prev: smail,  Up: Interfacing mailer

Interfacing BSD-sendmail with FUNET-NJE
=======================================

   *This presentation is by the courtesy of mr.  Jukka Ukkonen of
CSC.FI, translation to english is by Matti Aarnio*

   *See source-tree subdirectory `sendmail-configs/' for the way how
Paul Bryant <P.Bryant@rl.ac.uk> did this.

   Note also from ZMailer's bsmtp3* et.al. entry definitions how you
can change the local "MAILER"-name.  (The "-u"-option for the
bmail-program.)*

   Somewhere in the begin of the `sendmail.cf':
     # Bitnet route table (overriding default routes)
     Kbitnettable dbm -o /usr/local/lib/mail/bitnettable

   Then in *S0*-rules after error-mailer, local checkup, uucp, and
mailertable:
     # Try a separate table for bitnet routes.
     R$*<@$-.$+.bitnet.>$*       $:<$(bitnettable .$3$)>$1<$2.$3>$4
     R$*<@$+.bitnet.>$*          $:<$(bitnettable $2$)>$1<$2>$3
     R<$-!$-!$+>$*<$+>$*         $#$1$@$3$:$2          matched a 3 part route
     R<$-!$+>$*<$+>$*            $#$1$@$2$:$3@$4       matched a 2 part route

   One completely new ruleset, though a short one, because other domains
need not stripping:
     #
     #  Strip fake domains off in case posting directly
     #  to the receipient's native mail system.
     #
     S22
     R$*<@$+.bitnet.>       $@$1<@$2>

   This *R=22* is only for receiver's side mailer definitions.  (Odd
tens are for the sender, even tens are for the receiver.  Smaller ten
is for envelope conversion, and bigger is for header conversion in case
headers call for different transformation, than envelope, a'la S=11/31.)

   If sender address need to be translated into node format (from their
propable FQDN format), there appears a need for yet another mapping of
FQDN addresses to BITNET node names, which in practice means yet
another dbm-database for maintance:
       Kbitnetname dbm -o /usr/local/lib/mail/bitnetname
   This needs another set like `22' above which tries to do the lookup
according to the sender's machine, othervice the default *S=11* is ok.

   On the other hand those, who have *S=11/31*, like I have done it,
the `31' is dangerous, because it does a lookup of `*$(generics $1
$)*', which produces long names a'la *Jukka.Ukkonen*, which in the
usual BITNET-world is not quite commonly tolerated...

   A new *S=xx* could be for example this S=12 below.  `*$N*' can be
made local default name for the BITNET; *CNfinfiles*:

     S12
     R$*<@$=w.>     $:$1<@$(bitnetname $2$)>
     R$*<@$=w.>     $@$1<@$N>
     R$*<@$+.>      $@$1<@$(bitnetname $2$)>

   In addition to those there is also a need for all the mailer entries,
like: `*Mbsmtp3*'  (See ZMailer's "sm"-defines for hints.)

   *Non-translated email continues with an apology of being too tired
to finish it "tonight", nor is `Jau' certain, that these make any
sense/are corrent - early September-94.*
             Cheers,
                     // jau
     ------
       /    Jukka A. Ukkonen, M.Sc. (tech.) Centre for Scientific Computing
      /__   Internet: ukkonen@csc.fi            Tel:  (Home) +358-0-578628
        /   Internet: jau@cs.tut.fi                   (Work) +358-0-4573208
       v    X.400:    c=fi, admd=fumail, no prmd, org=csc, pn=jukka.ukkonen


File: funetnje.info,  Node: Nuts and Bolts,  Next: Literature,  Prev: Interfacing mailer,  Up: Top

Technical documents about insides of things
*******************************************

* Menu:

* directories::         Sample directory structure, and related notes
* cmdpipe::             client -> emulator messaging
* iucvpipe::            iucvtrap <-> emulator messaging
* spool format::        Spool file format
* netdata::             Implemented NETDATA features
* emulator logics::     Details of emulator logics


File: funetnje.info,  Node: directories,  Next: cmdpipe,  Up: Nuts and Bolts

Directory structure of the FUNET-NJE
====================================

`/etc/funetnje.cf'
     Is the default location of the runtime system master configuration
     file.  It defines all other files and directories used by this
     system.

`/usr/local/funetnje/'
     A possible location to place system programs, which are used by the
     system only.

`/usr/local/bin/'
     A possible location to place user-callable programs into.

`/usr/local/sbin/'
     A possible location to place sysmanager-callable programs into.

`/var/spool/bitnet/'
     Outgoing file spooling directory (and its subdirectories); defined
     on `/etc/funetnje.cf'.

`/var/spool/bitspool/'
     Incoming file spooling directory - each user has his/her own
     subdir; defined on `/etc/funetnje.cf'.


File: funetnje.info,  Node: cmdpipe,  Next: iucvpipe,  Prev: directories,  Up: Nuts and Bolts

Client to Emulator messaging
============================

   There are multiple methods (depending upon your operating system) on
how to use the client->emulator command channel.


File: funetnje.info,  Node: iucvpipe,  Next: spool format,  Prev: cmdpipe,  Up: Nuts and Bolts

IUCVTRAP <=> Emulator messaging
===============================

   ***T.B.W.*** - whole thing needs to be created


File: funetnje.info,  Node: spool format,  Next: netdata,  Prev: iucvpipe,  Up: Nuts and Bolts

FUNET-NJE Spool Format
======================

   *Straight copy of man-page: bitspool(5)*

   *Bitspool* format consists of an *ASCII* header, and a binary body
containing length-tagged "records".  The length-tag is "*network byte
order*"-ordered 16 bit short integer.  This is to facilitate transfer
of spool files in between systems, and to make it simpler to use
non-homogenous hardware in clusters which share the same *BITNET* node..

   Known *ASCII* headers are:
*FRM:* USERNAME@HOSTNAME
     Mandatory (fall-back default: "***@****").  Uppercase-only data in
     fixed 17 chars wide field, left justified.

*TOA:* USERNAME@HOSTNAME
     Mandatory (fall-back default: "POSTMAST@<localname>").
     Uppercase-only data in fixed 17 chars wide field, left justified.

*FNM:* FILENAME
     Optional, default value: "UNKNOWN".  Mixed-case alphanumeric data
     in fixed 12 chars wide field, left justified.

*EXT:* FILEEXTN
     Optional, default value: "DATA".  Mixed-case alphanumeric data in
     fixed 12 chars wide field, left justified.

*TYP:* type
     Optional, defaults to "PUNCH".  Controls physical device attribute
     on the outgoing NJE headers.  When sending PRINT files, use *TYP:
     PRINT*.  When you want to send SYSIN jobs, use *TYP: JOB*, and if
     it is just a PUNCH something, use *TYP: PUNCH*.

     Recognized obsolete keywords for the TYP are: MAIL, BSMTP, FILE,
     and FASA, which are in reality synonyms for PUNCH, and PASA, which
     is synonym for PRINT.

*CLS:* class
     Optional, defaulted by the *TYP:*, if not defined.  This is *one*
     (1) uppercase alpha in range A-Z.

     Customary values are: MAIL, BSMTP files: M, NETDATA containing
     binary data: N, console printouts: O, all others: A.

*FOR:* FILEFORM
     Optional, recommended.  If you don't want to see file-traversal
     notes from the network, BITNET style is to start the form name
     with two characters: "QU".  That matches at "QUIET", "QUMAIL", ...

     System wide default is taken from `/etc/funetnje.cf DEFFORM'
     entry, and it often has value *STANDARD*.

*FMT:* spool-format
     Mandatory (fall-back default: *BINARY*).

     *BINARY* for all locally generated files, and for cases where the
     *ASCII* headers have been mungled after the file was received from
     the network.

     *EBCDIC* denotes spool file which has been received from the
     network, and contains all possible data blocks in it.  (Users will
     ignore all, but PUNCH, and PRINT records..)

*FID:* 9900
     Mandatory, sender original spoolid; A number between 1, and 9900.
     File submitter should put "0000" in there, and delivery facility
     will do something about it.. When system picks up this field, it
     will assign there next spoolid from file sender's store, however
     network delivery uses "*OID:*", which it assigns..

*OID:* 0000
     Mandatory, for spool-id allocation at the first time it is queued
     for delivery to somewhere remote.

*TAG:* RSCS-TAG-STRING
     Optional.  The IBM NJE TAG string of 136 characters.

*DIS:* RSCS-DIST
     Optional.  Fixed width, left justified 8 characters field of RSCS
     DIST information.  Default: "*SYSTEM*".

*REC:*  nnnn
     Highly preferred (almoast mandatory!) Tells the number of records
     of data; necessary to get job-header right on file transmission,
     altough not really mandatory for successfull file sending.  As the
     count of records isn't known before all are written (in the usual
     case), this entry is written at first to reserve space for later
     seek, and rewite with correct information.

*JNM:* JOBNAME
     Optional.  Contains NJE job name (8 characters).

*PRT:* prtfiles@tonode
     Optional.  For *SYSIN* jobs this defines alternate address for
     sending the job PRINT outputs to.  Default is taken from "*FRM:*".

*PUN:* punfiles@tonode
     Optional.  For *SYSIN* jobs this defines alternate address for
     sending the job PUNCH outputs to.  Default is taken from "*FRM:*".

*END:*
     Mandatory.  Ends the *ASCII*-portion of the headers.  Terminating
     newline must be immediately after the colon character.

   With all (except *END:*) above header tags there must be exactly one
space (ASCII 32) after the colon, and before data.  With the *END:*,
there must not be any extra blanks after the colon, and before
terminating newline.

   Order of the *ASCII* format headers is not fixed, except that *END:*
must be last.

   Binary format data follows syntax:
         <16-bit length> <length number of bytes>
   where the *<16-bit length>* is encoded as *network-byte-order* short
integer.  This is to facilitate easy copying of *funetnje*(8) spool
files from one machine to another.  This also makes it possible to
share common *BITNET* pool between several machines independent of
their native byte order.

   Sample data formats:
*PUNCH*
          (any content, like plain text, and  *NETDATA*)
          0x80, 80,                       0x80 = PUNCH, 80=content length
          <80 bytes of EBCDIC/whatever>   The PUNCH content, 80 bytes

*PRINT*
     Machine Carriage Control:
          0x90, 132, MCCbyte,             0x90 = PRINT MCC, 132=content length
          <132 bytes of EBCDIC/whatever>  The PRINT content, 132 bytes

*PRINT ASA*
     Carriage Control:
          0xA0, 132, ASAbyte,             0xA0 = PRINT ASA, 132=content length
          <132 bytes of EBCDIC/whatever>  The PRINT content, 132 bytes

*PRINT CPDS*
          Carriage Control:
          0xB0, 132, CPDSbyte,            0xB0 = PRINT CPDS, 132=content length
          <132 bytes of EBCDIC/whatever>  The PRINT content, 132 bytes

   Trailing *EBCDIC*-spaces can be suppressed in the spool files, thus
above are given ranges of lengths.  If the record content is shorter,
than its defined size, receiver *must* pad it with *EBCDIC*-spaces.
(Of course, this way spool-size of a megabyte of spaces will be 13108
records of (2+)2 bytes + header, which makes circa 53kB.  When
received, it will expand by a fractionally filled last record.) The
length-byte at each record *must* be of its nominal value, record
truncation is coded with the 16-bit-length value.

   The *MCCbyte*, and *ASAbyte* are two kinds of "*carriage control*"
-mechanisms.  The *CPDSbyte* is third kind, however documenting it is
left for further study.

   IBM printers are fixed 132 characters wide, and on overall those
systems function on records, and a write in this respect means write of
whole line.  On overall the IO-operations on IBM mainframe happen on
records, or preferrably chains of records on which single start-IO
instruction can be used to start the IO-channel.

   Carriage-control mechanisms contain two kinds of controls, both
pre-write, and post-write controls exist in MCC mode.  In ASA-mode only
pre-writes are defined.  Pre-write controls happen before the printout
line is written, for example `jump to nearest VFU channel 1 forward'
(in plain english: Form-Feed..)

*Jump to next page*
     ASA: `1', Pre-MCC: X'8B'

*Overwrite; Defined only in pre-write.*
     ASA: `\+', MCC: X'01'

*Write and advance one line*
     ASA: Space, Pre-MCC: X'0B', Post-MCC: X'09'

*Write and advance twolines*
     ASA: `0', Pre-MCC: X'13', Post-MCC: X'11'

*Write and advance three lines*
     ASA: `-', Pre-MCC: X'1B', Post-MCC: X'19'

   Other formats, than  0x80, 0x90, 0xA0, 0xB0  of binary portion
records should be ignored. (Received network transport layer headers
are there, etc.)


File: funetnje.info,  Node: netdata,  Next: emulator logics,  Prev: spool format,  Up: Nuts and Bolts

Implemented NETDATA features
============================

   The *parser* understands following NETDATA keys:
*INMDSORG
     Only SEQUENTIAL is understood (others generate complaint, but
       do not abort.)

*INMRECFM
     No special record-contents are supported, nor flagged!

     Carriage-control information is checked against MCC.

     Blocking info is ignored.

     Record-kind info is ignored.

*INMLRECL
     If LRECL exceeds 65534, it is complained, but not aborted.

*INMSIZE
     SIZE (in XXX units) is ignored.

*INMNUMF
     NUMF (what??) is ignored.

*INMFACK
     Request for ACK of reception is analyzed, and provided for
     user for possible action.

*INMTERM
     This flag of PROFS NOTE message is noted, but ignored.

*INMFTIME
     This file creation(?) timestamp is analyzed, and provided for
       user for possible action.

*INMCREAT
     This file creation(?) timestamp is analyzed, and provided for
       user for possible action.

*INMDSNAM
     The originating system dataset name (esp. on MVS systems)
     is saved for possible user action.

*INMMEMBR
     The originating system dataset member name ("file name")
     is saved for possible user action.

*All others are silently ignored
   NETDATA producing systems (`sendfile'-command mainly) create
following datas:
*On INMR01 -record:*
    *INMFUID
          Sending user's username is stored into the file.
          Actually this *should* be the owner name of the         sent
          file.

    *INMFNODE
          Sending system name is stored into the file.          (In
          theory this should be file's originating node name.)

    *INMTUID
          File senders username

    *INMTNODE
          File senders nodename

    *INMFTIME
          If the sent file is a regular file, this is its last-modify
               timestamp.  Othervice a 0-size date is stored (so the
          INMFTIME         key is stored, but with void data.)

    *INMLRECL
          On INMR01-record the LRECL is fixed 80.

    *INMNUMF
          Fixed value of "1".

    *INMFACK
          If an acknowledge is wanted, this key is generated.

*On INMR02 -record:*
    *INMUTILN
          A fixed value of "INMCOPY" (7 chars) is stored.

    *INMDSORG
          A fixed value of "PHYSICAL" (0x4000) is stored.

    *INMLRECL
          A *true* LRECL (user supplied) is stored onto INMR02-record.

    *INMRECFM
          A true RECFM (user supplied) is stored onto INMR02-record.

    *INMSIZE
          File size in bytes is stored.

    *IBMDSNAM
          Here a dataset name is stored in style of: "A Filename
          Fileext"

          The first letter is always "A", and then comes one or two
             at most 8-chars long tokens.  One space separates each
          token.

    *INMCREAT
          If file creation time is supplied, it is stored.

*On INMR03-record:*
    *INMRECFM*
          Fixed value of 0x0001.

    *INMLRECL*
          Fixed value of 80.

    *INMDSORG*
          Fixed value of 0x4000.

    *INMSIZE*
          Sent file's size in bytes.


File: funetnje.info,  Node: emulator logics,  Prev: netdata,  Up: Nuts and Bolts

Emulator logics
===============

   Documenting how the emulator works internally...

   ***T.B.W.***


File: funetnje.info,  Node: Literature,  Prev: Nuts and Bolts,  Up: Top

Literature
**********

   Here is a partial list of things to read:
   * IBM publication SC23-0070-02: *Network Job Entry - Formats and
     Protocols*

   * IBM publication GG22-9373-02 *(older version of previous)*

   * `NEWTAGS DESCRIPT' from your nearest NETSERV.

   * `NETDATA DESCRIPT' from your nearest NETSERV.

   * `BRFC0002 TEXT' from BITNIC

   * `TECOVER.LISTPS' from Princeton - BITNET-II technical overview.
     (LISTSERV@PUCC ??)

   * `USRGUIDE.LISTPS' from Princeton - VMNET users/operators guide.
     (LISTSERV@PUCC ??)


