This is Info file funetnje.info, produced by Makeinfo-1.55 from the
input file funetnje.texinfo.

   This file documents FUNET-NJE version 3.0, which implements
BITNET-II -type BITNET node-to-node connectivity on UNIX systems.

   Copyright (C) 1994 Finnish University and Research Network, FUNET.

   Permission is granted to copy and use this material for
non-commercial use without prior agreenment.


File: funetnje.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

* Menu:

* Introduction::        Introduction to NJE-networking
* BITNET-II::           Structure of Second Generation BITNET on virtual links
* Installation::        Installation of FUNET-NJE package
* Configuration::       Configuration of FUNET-NJE package
* User programs::       Documentation on user programs for NJE use
* System programs::     Documentation on system programs for NJE use
* Interfacing mailer::  Interfacing  sendmail/smail/Zmailer to BITNET
* Nuts and Bolts::      Technical documents about insides of things


File: funetnje.info,  Node: Introduction,  Next: BITNET-II,  Prev: Top,  Up: Top

Introduction to NJE-networking
******************************

   Traditionally NJE-networking happens (did happen) in between two IBM
mainframes via BISYNC cable on 4800/9600 bps speed.

   Used protocols do vary, but most widely used ones have multiple
interleaved streams etc. in them, and they keep a tab on line condition
by timeouting, if acknowledgements don't appear quick enough.  The
protocols also have a sort of CRCs in them for every "packet" they send
over the wire.

   Things that are possible with NJE-network are:
*Unsolicited file transfer*
     Sending files to the recipients without them being aware of files
     coming to them, nor in fact asking any authorization prior sending
     it to them.

     Especially this contradicts the way how the FTP works.

     This happens in *Store-and-Forward*-manner, that is, when the file
     is sent over one link, responsibility for it is transferred to the
     next node, and link-sender can delete it from its own spool.

*Remote Job Entry*
     Sending batch-jobs to remote machine for execution, especially to
     MVS systems.

*Nodal Messaging*
     Sending short (max 120 chars) lines of messages to recipients at
     other nodes.

   With these basic facilities it is possible to build extended
services, like:
*
     Remote printing

*
     Email

*
     File transfer

*
     Remote Job Execution (Batch processing)

*
     Interactive discussion one line at the time via NMR-messages

*
     Interactive control of servers accepting NMR-messages

   This networking mechanism allows to have simple phone-line quality
links to be used to transport huge amounts of data over long distances.
It may be somewhat slow at the times, but it works...

   An entry-level BITNET connectivity requires capability to communicate
via synchronous BISYNC interface, although these days BITNET-II
technology has largely surplanted it.  See on next chapter.

   There exists even ASYNC NJE, although that is more like experimental
kludge for hackers, than serious production tool.

   Names in the BITNET  are at most 8 characters long.  This fits both
the users, and also machines (nodes).

   Routing in the BITNET requires every machine to know every other, and
therefore there exists fairly large bureaucracy for keeping the linkage
information up to date.

   Full routing updates are done in semi-monthly manner, which updates
can usually be incorporated into the system with minimal fuzz, or in
case of FUNET-NJE, automatically.

   There are email-gateways in between the BITNET, and the rest of the
world.  Email is transported inside the BITNET with three methods:
*defrt1*
     Target system has no mailer, all email must be sent to the users
     directly.  Normally a mail-file is sent in PUNCH-80 format.

*bsmtp3*
     Target system has a mailer, which can receive Batch-SMTP-file
     containing the email.  Format of the file is PUNCH-80.

*bsmtp3nd*
     Target system has a mailer, which can receive Batch-SMTP-file
     containing the email.  Format of the file can be PUNCH-80, or
     NETDATA.  In case the email contains longer lines, than 80
     characters, this is recommended method, if receiver system can
     accept it.

   To familiarize him-/herself with NJE-networking,  the reader should
also have access to the IBM  manual `*Network Job Entry Formats and
Protocols for System/370 Program Products*', *GG22-9373-02* or
*SC23-0070-01* (or later).


File: funetnje.info,  Node: BITNET-II,  Next: Installation,  Prev: Introduction,  Up: Top

Structure of Second Generation BITNET on virtual links
******************************************************

   BITNET was a traditional wires+modems network, until the NSF-net
began to grow in late 1980's.

   When it became evident, that having separate wires for BITNET, and
for other networking activities (TCP/IP, NSF-net) is asking to keep old
separate lines in existance with new high-speed Internet, multiple
solutions were sought after for replacing physical wires with virtual
ones.

   In 1986-1989 Ira Fuchs, Peter Olenick et.al. (Princeton University)
developed so called BITNET-II protocol, with which it became possible
to replace dedicated physical wires with virtual TCP/IP connections
over the Internet.

   The protocol, and its reference implementation are described on
`BRFC0002 TEXT' available at least from  ftp.funet.fi:
      ftp.funet.fi:/pub/doc/netinfo/CREN/brfc0002.text
   via anonymous FTP.

   Soon after, (in 1990), Lee Varian, Peter Olenick, and Michael Getter
(all from Princeton University) made a BITNET restructuring proposal on
which they divided fine-grained threaded mesh of the former BITNET into
9 regions.

   From their  `bit2plan.proposal':
                                                       February 1, 1990
                                             Revised September 21, 1990

           Proposal to Restructure the  Network Supporting BITNET

     Historically the  physical and  logical networks  supporting
BITNET have   been structured on leased  communications lines
connecting member sites.   New sites  connect to the network  based
upon  an  existing BITNET  member's  willingness  and  ability to
support the request for connection.   The cost of  the leased
communications line, which is paid for by the new  BITNET  site,  is
also a  consideration  in choosing  which  existing BITNET sites are
possible connection points.   The  cost of  the communications line
may be different  based on  factors of distance and tariff
considerations.   This method  of connecting new sites has worked quite
well,  but the lack  of  a   formal  structure  for   the  network   is
creating  limitations  which  impair  the  efficiency  and  growth  of
BITNET.  The lack of a structure increases the complexity of  routing
table  generation and  hampers efforts  to implement  network
management tools.    The ability  to create  BITNET  links  by  using
the  national  and  regional  IP  networks  increases the confusion
over where BITNET connections should  be made.

     The idea of reorganizing BITNET into a more formal structure  has
been discussed for a number  of years,  but the costs of  the
additional leased lines needed  to implement such a plan  made the
project economically infeasible.   Now,  BITNET has  the ability to use
the national and regional IP networks;  a  plan to restructure BITNET
by  using the IP networks appears  to be  cost effective and
implementable.   This  plan could  also be implemented using private
communications facilities  and IP routers instead  of using  the
national  and regional  networks.   The costs of  an  implementation
using a private  IP network would need to be carefully considered.

                           Restructuring Proposal

     The   restructuring    is   based   on   the    concept   of
'regionalization',   the  separation  of  the  network  into
geographic areas  or regions.   Each  region would  have two  'core'
sites.    Each  core site  would  have  RSCS-over-IP  connections to
every other core site.   The core sites would  form a 'backbone'.
The national and regional  IP networks  are the physical  facilities
that would be used  by the core  sites  to   form  the   BITNET
backbone.     By  generating  appropriate BITNET routing tables,  the
number of nodes and  the amount of traffic handled by  the core sites
for a given  region can be  statically balanced.   Within a  region,
the  core sites could  connect to a number  of 'mid-level' sites,
again by use  of RSCS-over-IP.   This type  of structure has  the
ability to provide an alternate  path into a region if a  core site
were  out of service.   The member  sites or 'end'  sites within a
region could  connect to the mid-level sites.   Traditional leased line
connections may  exist at any level  within the  structure but  these
types  of connections  will  continue to  have limitations.    That is,
 if a  host with  traditional leased lines is down, no other path may
exist to  the sites supported by that leased line.  ...

                       Benefits of the restructuring

     The purpose of the regionalization  is to impose a structure  on
the  logical network supporting BITNET.    This structure  will  reduce
the  burden  on   the  current  hub  sites  by  decreasing  the number
of files  which  must transit  these  sites.  Overall network service
will be improved because the  number of 'hops'  a file must take to
reach its destination  will be reduced or be no  greater than in the
current BITNET  topology.   The impact  on BITNET when a key  BITNET
node or  Internet connectivity fails  will be reduced because  of the
increased number of connections between core sites.   As the
intra-regional mid-level structure develops,  the ability of  the  core
sites to dynamically  reroute  traffic  around  a  disabled  core node
will provide  improved network  access.   The three level (core,
mid-level, end site) structure of the  region  can be  expanded to
include  additional levels  and  paths as  needed within the  region,
thereby  providing for  dynamic rerouting within a region as well.


File: funetnje.info,  Node: Installation,  Next: Configuration,  Prev: BITNET-II,  Up: Top

Installation of FUNET-NJE package
*********************************

   Installation of this package is fairly straight-forward by editing
proper parts from to be activated from the `Makefile', and editing
sample configuration files for your local machine.

   This system has two hard-wired files, which can be overridden by
editing `site_consts.h'-file, or defined in `Makefile':
*/etc/funetnje.cf*
     Main configuration file telling where rest of the system resides

*/etc/funetnje.pid*
     The "pid file" giving easy pointer to the running emulator program

   Via `/etc/funetnje.cf', and its extensions (`msg-exit.cf',
`file-exit.cf') it is possible to define outgoing, and incoming spool
directories, et.al.  Only notable detail is that all those directories
*must* reside on same disk partition, as files are moved from within
emulator spool to user spool with *link(2)*-, and *unlink(2)*-system
calls. (Or  *rename(2)*, if it exists.)

   For inter-module access control this software uses one UNIX group,
which is used to *set-gid* some programs, and which is needed for
system administrators so that they can run the control program without
a need to become super-users, and also without a need to set-gid the
control-panel (`ucp').

   Things to decide:
   * Name and number of the `bitnet' programs group (into your
     `/etc/group').  The `Makefile' has variable NJEGRP for it.

   * Directories for your BITNET transmission spool, and user spool.
     *Important: those must be on same partition!*

     Example configurations have them as: `/var/spool/bitnet'
     (*QUEUEDIR*), and  `/var/spool/bitspool' (*USERSPOOL*).

   * Location of various programs, `Makefile' has variables: MANDIR,
     LIBDIR, BINDIR, and ETCDIR.

   Choosing proper items for the compile of the software, especially
your platform dependent pre-processor constants:
*-D_POSIX_SOURCE*
     Use on true  POSIX.1 systems

*-DHAS_PUTENV*
     If your system has SysV-like   putenv(3) to set environment
     variable.  When this is not defined, a BSD-like  setenv(3) is
     assumed

*-DHAS_LSTAT*
     Use when your system has   lstat(2) in addition to the usual
     stat(2)

*-DUSE_SOCKOPT*
     Use when your system has a working   setsockopt(2) for  SO_RCVBUF,
     and  SO_SNDBUF.  Most systems do!  This is a performace option,
     which *might* help on busy systems

*-DNBCONNECT*
     The system can do a  connect(2) on a socket, which has been
     flagged as non-blocking.  Without this connection to a system
     which is unreachable would cause system to hang for synchronous
     timeout...

*-DCONFIG_FILE=...*
     Override `consts.h' definition of system config file name

*-DPID_FILE=...*
     Override `consts.h' definition of emulator process-id file name

**A set of IPC methods, choose one!**
*-DCOMMAND_MAILBOX_FIFO*
     Uses named pipe ( mkfifo(2)) for an emulator vs. user programs IPC
     channel.  Fifo path is taken from `/etc/funetnje.cf' CMDMAILBOX
     entry

*(-DFIFO_0_READ)*
     A subitem on *-DCOMMAND_MAILBOX_FIFO* - Do a  close(2)/ open(2)
     pair on a FIFO, when read from it returns 0.  Was needed for Linux
     0.99pl13.

*-DCOMMAND_MAILBOX_SOCKET*
     Uses  AF_UNIX,  SOCK_STREAM for the IPC channel.  Socket path is
     taken from `/etc/funetnje.cf' CMDMAILBOX entry

*-DCOMMAND_MAILBOX_UDP*
     Uses  AF_INET,  SOCK_DGRAM for the IPC channel.  Socket IP address
     is taken from `/etc/funetnje.cf' CMDMAILBOX entry (numeric), and
     it naturally must be on same machine, as the emulator runs.  This
     is only choise for cluster nodes

**Some compiler switches:**
*-fno-builtin*
     A GNU-CC option telling it, that builtin accelerated operations
     should not be used. (Alignment may cause problems on some cases!)
     However we have a fairly high confidence that we have eliminated
     every case, where inlining a  memcpy(3) could cause problems.  Try
     without it!

**Some more esoteric tricks:**
*-DDEBUG*
     If you really want to see what goes on...  The amount of DEBUG-code
     is decreasing all the time, and frankly we haven't compiled the
     code with `-DDEBUG' for last 100 or so versions, we have just added
     `logger()'-calls into it at places needing it, and adjusted
     LOGLEVEL to get them into LOGFILE...

*-DUSE_ZMAILER -I/usr/local/include*
     For `mailify.c' - for tight integration with Zmailer MTA.

   Several pre-tested compiler setups are also available in the
`Makefile'.


File: funetnje.info,  Node: Configuration,  Next: User programs,  Prev: Installation,  Up: Top

Configuration of FUNET-NJE package
**********************************

* Menu:

* funetnje.cf::         Runtime main configuration file
* file-exit.cf::        Incoming files processing configuration file
* msg-exit.cf::         Incoming NMR's processing configuration file
* cmd-help.txt::        Text file that is sent as a responce to NMR 'HELP'
* routes::              BITNET node routing databases


File: funetnje.info,  Node: funetnje.cf,  Next: file-exit.cf,  Up: Configuration

Runtime main configuration-file: `funetnje.cf'
==============================================

   Here is a sample `/etc/funetnje.cf' -file:
     *
     *       Configuration file for FUNET-NJE program
     *
     
     NAME            FINFILES                      Node primary name
     *IPADDRESS      nic.funet.fi                  Node primary IP address
     IPADDRESS       128.214.6.100                 used on link signon msgs
     QUEUE           /usr/spool/bitnet             Emulator spool directory
     CMDMAILBOX      /usr/spool/bitnet/.cmdpipe    IPC Socket/Fifo/IP-address
     LOG             /usr/adm/bitnet.log           Emulator log-file
     LLEVEL          1                             Logging level.  Smaller==less
     RSCSACCT        /usr/adm/bitnet.acct          Define for IBM RSCS-like acct
     * this table is a binary file.
     TABLE           /usr/local/lib/huji/finfiles.routes   NJE route database
     INFORM          MEA@FINFILES ROOT@FINFILES    1+ users monitoring line states
     FILEEXITS       /usr/local/lib/huji/file-exit.cf      See  file-exit.cf
     MSGEXITS        /usr/local/lib/huji/msg-exit.cf       See  msg-exit.cf
     DEFFORM         STANDARD                      NJE 'FORM' default
     *DEFAULT-ROUTE  FINHUTC                       Optional default route
     
     *  Example link to a VAX/VMS system with UCX, and JNET
     LINE 0 FIGBOX                           Key-line starting link definition
      TYPE           UNIX_TCP                Only supported value is  UNIX_TCP
      BUFSIZE        4096                    VMNET TTB size
      TIMEOUT        3                       3 is a good value..
      IPPORT         500                     Opposite end's VMNET's IP port
     * TCPNAME       figbox.funet.fi         Opposite end's name
      TCPNAME        128.214.6.7              .. or IP number ..
      TCP-SIZE       8192                    How much to block before write
      MAX-STREAMS    7                       Number of parellel streams
     
     *  Example link to a Linux-PC running FUNET-NJE
     LINE 1 ALIJKU65
      TYPE           UNIX_TCP
      BUFSIZE        1024
      TIMEOUT        3
      IPPORT         175             The official VMNET port
     *TCPNAME        alijku65.edvz.uni-linz.ac.at
      TCPNAME        140.78.4.34
      TCP-SIZE       3100            Lower than usual - network problems
      MAX-STREAMS    7
     
     *  Example link to an IBM VM/SP RSCSv3 system with VMNET
     LINE 2 FINHUTC
      TYPE           UNIX_TCP
      BUFSIZE        1024
      TIMEOUT        3
      IPPORT         175
     *TCPNAME        finhutc.hut.fi
      TCPNAME        130.233.224.4
      TCP-SIZE       8192
      MAX-STREAMS    7
     
     *  Example link to a Convex C3480 running FUNET-NJE
     LINE 3  FINFAN
      TYPE           UNIX_TCP
      BUFSIZE        8192
      TIMEOUT        3
      IPPORT         175
      TCPNAME        convex.csc.fi
      TCP-SIZE       8192
      MAX-STREAMS    7


File: funetnje.info,  Node: file-exit.cf,  Next: msg-exit.cf,  Prev: funetnje.cf,  Up: Configuration

Incoming files processing configuration file: `file-exit.cf'
============================================================

   This is *wide* format configuration file (like they all), and can be
used to define what is done with various incoming files.

   Over-wide lines are wrapped *in this document* with  \-characters at
the end of previous line, and at the begin of next line.  Such wrapping
is not allowed in the real configuration file!

     #  FILE-EXIT.CF -- Configure file handling on FUNET-NJE
     #
     # Rule for spool disposition path, defines also system default
     # user spool directory for those who don't have specially set
     # something else.
     # Possibilities:        ~/bitspool  -- real user's only! (~/ == users home)
     #                       /usr/path/path/ -- append 'touser' as subdir,
     #                                           it is spool dir.
     #                                          Valid for Exits and real users.
     #                       /usr/path/path  -- explicite directory.
     #                       /dev/null       -- explicite file (special case).
     #       When directory isn't present, it is built from upmost present level
     #       down to users bottommost level hmm...
     #   Question about ownership of directory/files...
     #     Real users:  real protections, programs start with setuid() user.
     #         Exit users:  POSTMAST  (exits start as root anyway.)
     #         Exited reals: real protections, programs start with setuid() user.
     
     Spool-Dir:      /usr/spool/bitspool/
     Postmast-Dir:   /usr/spool/bitspool/POSTMAST
     
     # Now list of things to match and then what to do
     # To do keywords:       DISCARD to /dev/null.
     #                       KEEP    just so.  Into default or given spool.
     #                       NOTIFY  send an NJE message to someone.
     #                       RUN     starts arbitary program with arbitary
     #                               arguments telling about file location
     #                               and its properties.
     #                               If fails, well..
     
     # Defining  SpoolDir  which shall not be attached ToUser must not be done
     # with trailing "/", (and vice versa)
     #       /usr/spool/bitnet/SYSIN-JOB
     
     # Exit table begin keyword:
     Exit-Table:
     
     # Args:
     # touser8 tonode8 fname8   ftype8  pun? class fruser8  frnode8  dist8    \
     \ SpoolDir                        action  ExtraArguments
     #
     # Several special handlings (tests/illustriations)
     #
     #MEA     FINFILES *        *        *   *     HKS      SEARN    *        \
     \ default                         DISCARD
     NOBODY   FINFILES *        *        *   *     *        *        *        \
     \ default                         DISCARD
     FOOBAT   FINFILES *        *        *   *     *        *        *        \
     \ default                         RUN   /usr/local/lib/huji/transfer \
     \ MEA@$TONODE $SPOOL
     ECHO     FINFILES *        *        *   *     *        *        *        \
     \ default                         RUN   /usr/local/lib/huji/transfer \
     \ NOBODY@$FRNODE $SPOOL
     #LPR     FINFILES *        *        *   *     *        *        *        \
     \ default                         RUN   /usr/local/lib/huji/rprint   \
     \ $SPOOL lpr $FRUSER $FRNODE $TOUSER $FID
     #
     #  Define what we do with the SYSINs
     #
     *        *        *        *        SYSIN *   *        *        *        \
     \ /usr/spool/bitnet/SYSIN-JOB/    RUN   /usr/local/lib/huji/sysin $SPOOL
     #
     #  Define a MAILER for our node!
     #  And also handle directly sent mail from nodes without mailers...
     #
     MAILER   FINFILES *        *        PUN M   *        *        *          \
     \ default                         RUN   /usr/local/lib/huji/mailify $SPOOL
     *        *        *        MAIL     PUN M   *        *        *          \
     \ default                         RUN   /usr/local/lib/huji/mailify $SPOOL
     #
     # NETINIT is pseudo id for automatically re-generating routing tables
     # This is done with  netinit.sh  which must be configured by hand.
     #
     NETINIT  FINFILES *        *        *   *   *        *        *          \
     \ default                         KEEP
     #
     # Finally  a `catch them all' default handling case.
     #
     *        *        *        *        *   *   *        *        *          \
     \ default                         KEEP


File: funetnje.info,  Node: msg-exit.cf,  Next: cmd-help.txt,  Prev: file-exit.cf,  Up: Configuration

Incoming NMR's processing configuration file: `msg-exit.cf'
===========================================================

   This is *wide* format configuration file (like they all), and can be
used to define what is done with various incoming NMR's.

   Over-wide lines are wrapped *in this document* with  \-characters at
the end of previous line, and at the begin of next line.  Such wrapping
is not allowed in the real configuration file!

     #
     # MSG-EXIT.CF  for FUNET-NJE
     #
     # Some first ideas about patterns, et.al.:
     #
     # Actions:  CMD: BUILTIN, RUN
     #           MSG: BRCAST, DISCARD, RUN, (PIPE)
     # Argument tokens for 'RUN': TOUSER, TONODE, FRUSER, FRNODE, TEXT, ARGS
     # Arguments for 'BUILTIN': "HELP", "HARDCODED", "ERROR"/ERROR msg-string",
     #                          "ALIAS remap-pattern"
     #
     
     CmdHelpFile: /usr/local/lib/huji/cmd-help.txt
     
     #$TOUSER $TONODE  $FRUSER  $FRNODE  C pattern    ACTION args
     # Actually TOUSER is not tested on commands, it will be blank anyway..
     .        FINFILES *        *        C "HIL*FE"   \
     \ BUILTIN HELP English quick document is available via 'HELP' command.
     .        FINFILES *        *        C "SOS"      \
     \ BUILTIN HELP English quick document is available via 'HELP' command.
     .        FINFILES *        *        C "H*ELP"    BUILTIN HELP
     .        FINFILES *        *        C "M * * * **"       BUILTIN HARDCODED
     .        FINFILES *        *        C "MSG * * * **"     BUILTIN HARDCODED
     .        FINFILES *        *        C "M*SG **"          \
     \ BUILTIN ERROR Too few arguments for the MSG
     .        FINFILES *        *        C "CMD * * **"       BUILTIN HARDCODED
     .        FINFILES *        *        C "CMD **"           \
     \ BUILTIN ERROR Too few arguments for the CMD
     .        FINFILES *        *        C "Q*UERY SYS*TEM S" BUILTIN HARDCODED
     .        FINFILES *        *        C "Q*UERY SYS*TEM"   BUILTIN HARDCODED
     .        FINFILES *        *        C "Q*UERY STAT*S"    BUILTIN HARDCODED
     .        FINFILES *        *        C "Q*UERY *"         BUILTIN HARDCODED
     .        FINFILES *        *        C "Q*UERY * Q*UEUE"  BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY N*AMES"  BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY U*SER *" BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY U*SER"   BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY LOG"     BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY CPU"     BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY CP*LEVEL" BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY IND*ICATE" BUILTIN HARDCODED
     .        FINFILES *        *        C "CPQ*UERY T*IME"   BUILTIN HARDCODED
     .        FINFILES *        *        C "CP*QUERY T*IME"   BUILTIN ALIAS CPQ $2
     .        FINFILES *        *        C "EC*HO **"     \
     \ RUN /usr/local/bin/send -s $FRUSER@$FRNODE *CMD was '$TEXT'
     # The default
     .        FINFILES *        *        C "**"       BUILTIN ERROR
     
     #$TOUSER $TONODE  $FRUSER  $FRNODE  M ACTION args
     #                 "." == FRUSER is blank, that is from some 'SYSTEM'..
     MAILER   *        *        *        M  DISCARD
     MAILSERV FINFILES .        *        M  DISCARD
     MAILSERV FINFILES *        *        M  \
     \ RUN  /usr/local/lib/mailserver/nje-msg $FRUSER $FRNODE $TEXT
     LISTSERV FINFILES .        *        M  DISCARD
     LISTSERV FINFILES *        *        M  \
     \ RUN  /usr/local/lib/mailserver/nje-msg $FRUSER $FRNODE $TEXT
     ECHO     FINFILES .        *        M  DISCARD
     ECHO     FINFILES *        *        M  \
     \ RUN  /usr/local/bin/send -u echo $FRUSER@$FRNODE *Got Message: '$TEXT'
     FINGER   FINFILES .        *        M  DISCARD
     FINGER   FINFILES *        *        M  \
     \ RUN /usr/local/lib/huji/nje-finger $FRUSER $FRNODE $ARGS
     
     # The default
     *        *        *        *        M  BRCAST


File: funetnje.info,  Node: cmd-help.txt,  Next: routes,  Prev: msg-exit.cf,  Up: Configuration

Node NJE command 'HELP' response file: `cmd-help.txt'
=====================================================

   Node help text can be changed with the `cmd-help.txt'-file, which
paths is defined in the `msg-exit.cf'.

     Commands available for FUNET-NJE emulator:
        Help / HILfe / SOS - Three commands to ask for this info
        Query SYStem       - Show line status summary report, and activity
        Query SYStem S     - Same as "Q SYS", but with extra activity data
        Query STATs        - Show line statictics
        Query Nodename     - Show the route entry to that node
        Query linkname A/F - Available via Query SYStem
        Query linkname Q   - Show 30 first files in queue on the link
        CPQuery Names      - List all users logged on
        CPQuery User       - Tell how many users are logged on
        CPQuery User username - Look for a specific username
        CPQuery LOG        - Send the WELCOME message
        CPQuery CPU, CPLEVEL, IND, T - Machine type and time
        MSG node user text.. - A way to send a NMR to some node via msg relay.
        CMD node text..      - A way to send a NMR to some node via cmd relay.
     This system has also NMR responding servers at addresses:
        ECHO@FINFILES       -- throws the NMRs back to you.
        MAILSERV@FINFILES   -- ask for HELP
        FINGER@FINFILES     -- Usage: tell finger@finfiles address@internet


File: funetnje.info,  Node: routes,  Prev: cmd-help.txt,  Up: Configuration

BITNET node routing databases: `nje.routes'
===========================================

   *FUNET-NJE* uses *IBM RSCSv1* compatible route files.  Used
data-elements are SITE, and LINE defnitions (second, and third tokens).

   The routing file (for example `finfiles.routes') is generated with
`njeroutes' -command:
     # njeroutes  finfiles.header finfiles.netinit finfiles.routes

         Local override file: `finfiles.header'
     *
     *  Header of FUNET-NJE/HUyNJE package routing table
     *
     *  Generic format:
     *       SITE    LINE    FORMAT
     *
      ROUTE FINFILES LOCAL ASCII
      ROUTE HAMSTER  LOCAL ASCII
      ROUTE FINFTP   LOCAL ASCII
      ROUTE FINUTU   FINUTU EBCDIC
      ROUTE ALIJKU65 ALIJKU65 EBCDIC
      ROUTE ALIJKU64 ALIJKU65 EBCDIC
      ROUTE FINHUTC  FINHUTC EBCDIC

         Node route file: `finfiles.netinit'
     *
     * GR version 91-11-19, date=94-02-04, time=00:01:34
     *
     * Table generation parameters: GENROUTE FINFILES NAME=FINFILES.NETI
     *                            : NIT.A
     *
     * Routing table information for
     * node: FINFILES nodenum: 0963
     *
     *
     * The routing table neither contains neighbours nor the local node.
     * List of neighbours:
     *
     * node: FIGBOX   nodenum: 3025
     *       FINHUTC           1044
     *
     * * The position of the network name and country *
     * * assumes that the RSCS ROUTE command does not *
     * * have more than two parameters.               *
     ROUTE VERS9402 FINHUTC  EARN     NL
     ROUTE FINABO   FIGBOX   EARN     FI
     ROUTE FINHUT   FINHUTC  EARN     FI
     ROUTE FINHUTA  FINHUTC  EARN     FI
     ROUTE FINJYU   FIGBOX   EARN     FI
     ROUTE FINKUO   FIGBOX   EARN     FI
     ROUTE FINNPHI  FIGBOX   EARN     FI
     ROUTE FINOU    FIGBOX   EARN     FI
     ROUTE FINUH    FIGBOX   EARN     FI
     ROUTE FINUHA   FIGBOX   EARN     FI
     ...


File: funetnje.info,  Node: User programs,  Next: System programs,  Prev: Configuration,  Up: Top

Documentation of user programs for NJE use
******************************************

   ***T.B.W.***

* Menu:

* qrdr::        Query user's reader
* receive::     Receive files from spool
* sendfile::    File sending with sendfile/print/punch/submit
* send::        Interactive messages/commands sender
* bitsend::     Send file in multiple parts with `table of contents'
* bitreceive::  Receive `bitsent' files
* ygone::       Register to the running Emulator to be `gone'
* iucvtrap::    Trap, and pipe out incoming NMR-messages from the Emulator
* transfer::    Resend files from user's spool


File: funetnje.info,  Node: qrdr,  Next: receive,  Up: User programs

Query user's reader: `qrdr'
===========================


File: funetnje.info,  Node: receive,  Next: sendfile,  Prev: qrdr,  Up: User programs

Receive files from spool: `receive'
===================================


File: funetnje.info,  Node: sendfile,  Next: send,  Prev: receive,  Up: User programs

File sending with `sendfile/print/punch/submit'
===============================================


File: funetnje.info,  Node: send,  Next: bitsend,  Prev: sendfile,  Up: User programs

Interactive messages/commands sender: `send'
============================================


File: funetnje.info,  Node: bitsend,  Next: bitreceive,  Prev: send,  Up: User programs

Send file in multiple parts along with `table of contents': `bitsend'
=====================================================================


File: funetnje.info,  Node: bitreceive,  Next: ygone,  Prev: bitsend,  Up: User programs

Receive `bitsent' files: `bitreceive'
=====================================


File: funetnje.info,  Node: ygone,  Next: iucvtrap,  Prev: bitreceive,  Up: User programs

Register to the running Emulator to be `gone': `ygone'
======================================================


File: funetnje.info,  Node: iucvtrap,  Next: transfer,  Prev: ygone,  Up: User programs

Trap, and pipe out incoming NMR messages from the Emulator: `iucvtrap'
======================================================================


File: funetnje.info,  Node: transfer,  Prev: iucvtrap,  Up: User programs

Resend files from user's spool: `transfer'
==========================================


File: funetnje.info,  Node: System programs,  Next: Interfacing mailer,  Prev: User programs,  Up: Top

Documentation of system programs for NJE use
********************************************

   ***T.B.W.***

* Menu:

* bmail::       `sendfile' with a twist to send BSMTP email
* mailify::     For receiving incoming email files
* ucp::         Emulator master control panel
* njeroutes::  Route-database generator program
* acctcat::     Utility to dump the RSCS-accounting records


File: funetnje.info,  Node: bmail,  Next: mailify,  Up: System programs

`bmail' - `sendfile' with a twist to send BSMTP email
=====================================================


File: funetnje.info,  Node: mailify,  Next: ucp,  Prev: bmail,  Up: System programs

`mailify' - incoming mail-file processing
=========================================


File: funetnje.info,  Node: ucp,  Next: njeroutes,  Prev: mailify,  Up: System programs

`ucp' - Emulator master control panel
=====================================


File: funetnje.info,  Node: njeroutes,  Next: acctcat,  Prev: ucp,  Up: System programs

`njeroutes' - Route-database generator program
==============================================


File: funetnje.info,  Node: acctcat,  Prev: njeroutes,  Up: System programs

`acctcat' - Utility to dump the RSCS-accounting records
=======================================================


File: funetnje.info,  Node: Interfacing mailer,  Next: Nuts and Bolts,  Prev: System programs,  Up: Top

Interfacing sendmail/smail/Zmailer to BITNET
********************************************

   There is a separate program (*mailify*) responsible for incoming
email processing, these are routers, and senders of BITNET email.

* Menu:

* sendmail::	Interfacing BSD sendmail
* smail::       Interfacing smail3.0
* Zmailer::     Interfacing Toronto Zmailer


File: funetnje.info,  Node: sendmail,  Next: smail,  Up: Interfacing mailer

Interfacing BSD sendmail into FUNET-NJE
=======================================

   *To be written - when somebody sendmail-user does it..*


File: funetnje.info,  Node: smail,  Next: Zmailer,  Prev: sendmail,  Up: Interfacing mailer

Interfacing Smail3.0 into FUNET-NJE
===================================

   In order to get SMAIL3.1.28 working with the meahan nje emulator,
following steps are necessary:

  1. Copy the BSMTP3, BSMTP3ND and DEFRT1 BASH scripts to your
     `smail-libdir', e.g. `/usr/local/lib/smail/'

  2. Edit these 3 Scripts to fit your nje emulator installation, mainly
     the path to the `bmail' program coming with the emulator needs to
     be set properly.

  3. If you don't use a `routers' and `transports' file till now,
     because the compiled in defaults of SMAIL fit your needs, make a
     copy of these files to the `smail-libdir'.  The source
     distribution of SMAIL comes with generic samples, which reflect
     the compiled-in configuration.

  4. Make an entry to `routers' file like below. Commonly between the
     entry which defines the `path' router and the `uucp-neighbors'
     router with the following lines

          bitnet: driver=pathalias,
                  method=bitmethods;
                  file=bitearn,
                  proto=bsearch,
                  -optional,
                  -required,
                  domain=bitnet,

     The position of the entries within `routers' file is significant.
     The decision, which path is taken, depends mainly on this position.
     Please consult the SMAIL doc, resp. man 5 smail for more info on
     this.

  5. Make a directory `methods' within `smail-libdir'.  Copy the
     supplied `bitmethods' file into there.

     Edit or generate a bitnet mailers routing table, and copy it to
     `smail-libdir'.  Currently no table compiler is provided...  The
     table has the common pathalias format with following entries:

             destdomain	transportmethod!mailername!nodename!%s

     where *destdomain* is the domain within bitnet, *transportmethod*
     is either bsmtp3, bsmtp3nd or defrt1, *mailername* is the name of
     the remote mailer userid which receives email from bitnet, and
     *nodename* is the bitnet node running the mailer

     The `*%s* behind the *nodename* is not needed for our purposes,
     but is necessary to pass the syntax check. The meaining of the 3
     transport methods is described in    Chapter ........ ******
     MATTI, PLEASE INSERT CORRECT VALUE HERE ******

  6. Edit the `transports' file in *smail-libdir* by adding the entries
     bstmp3, bsmtp3nd, and defrt1.  A sample is provided with the nje
     emulator package.

  7. Add to your SMAIL - `config' file to the *domains=*-line an entry
     for *bitnet*, separated by a ":"

  8. If the packages installed properly, reload smail configuration.
     Now it should be possible to deliver mail within BITNET using nje.



File: funetnje.info,  Node: Zmailer,  Prev: smail,  Up: Interfacing mailer

Interfacing Toronto Zmailer into FUNET-NJE
==========================================

   Doing this interface was easy due to vast amounts of easy to
understand configurability of the *Zmailer*(1) system.

   Depending on if the system is to be a smart-mailer, or not,
Zmailer's `router.cf' shall contain transport preference definition:
     # The transport preference order
     protocols='routes smtp usenet bitnet'
   which instructs it to include those four protocols into the
route-analysis. The protocols are attempted in given order!  Host
BITNET name must be defined in `/etc/name.bitnet' for Zmailer's
BITNET-protocol.

   If it is desirable *not to* have smart BITNET routing at the system,
it is possible to use lazy-routing of all "*.BITNET"-addresses into one
system somewhere else with following definition in `/etc/mail.conf':
     ...
     # rrouter.cf uses these..  Uncomment for use
     # : ${BITNETACTION:="bsmtp3nd mailer@searn"}
     # : ${BITNETACTION:="smtp figbox.funet.fi"}
   the first  one uses special delivery via BITNET facilities to
MAILER@SEARN, the second uses ordinary SMTP.

   BITNET email routing database (`$MAILVAR/db/routes.bitnet') contains
entries like:
     academic         bsmtp3!mailer!academic
     acmvm            bsmtp3!mailer!acmvm
     acusd            defrt1!acusd
     ...
     searn            bsmtp3nd!mailer!searn
     ...
   which essentially mean:
*academic*
     Use *bsmtp3*-channel, and send it to *mailer@academic*

*acusd*
     Use *defrt1*-channel, and send mail do *$user@acusd*

*searn*
     Use *bsmtp3nd*-channel (bsmtp3 in NETDATA instead of PUNCH), and
     send it to *mailer@searn* That routing database is built from
BITNET's `XMAILER NAMES'-file with a set of shell-, sed-, and
awk-scripts from U. of Toronto, and included in the *FUNETNJE*-package
in subdirectory `namesfilter/'.  It is a slightly edited version of
original Zmailer support utility.

   Channels are defined in `$MAILSHARE/scheduler.cf', in which these
three are defined as:
     ...
     defrt1/*
             command="sm -c $channel defrt1"
     bsmtp3/*
             command="sm -c $channel bsmtp3"
     bsmtp3nd/*
             command="sm -c $channel bsmtp3nd"
   Meaning they all are run via `sendmail-compatible transporter'.

   Configuration of the `sendmail-compatible transporter' at
`$MAILSHARE/sm.conf' contains these three entries for the BITNET:
     ...
     #
     # bitnet stuff F=hu not set
     #
     bsmtp3   snmSX /usr/local/lib/huji/bmail  bmail -b $h -u MAILER $g $u
     bsmtp3nd snmSX /usr/local/lib/huji/bmail  bmail -nd $h -u MAILER $g $u
     defrt1   snS   /usr/local/lib/huji/bmail  bmail $g $u

   ---------- Footnotes ----------

   (1) Zmailer is a mailer running in two modes with multiple programs
doing their parts; `router' (1 to many) doing email address routing,
`scheduler' running transport channels, like `smtp', `mailbox' (local
delivery), etc.  There are also incoming channel programs `smtpserver',
and compability interface `/usr/lib/sendmail'.

   The Zmailer is available from
ftp.cs.toronto.edu:/pub/zmailer/-directory by using anonymous FTP.

   A different copy from that is available from
ftp.funet.fi:/pub/unix/mail/zmailer/zmailer-2.2.1-mea-<datecode>.tar.gz,
also via anonymous FTP.


File: funetnje.info,  Node: Nuts and Bolts,  Prev: Interfacing mailer,  Up: Top

Technical documents about insides of things
*******************************************

* Menu:

* directories::         Sample directory structure, and related notes
* cmdpipe::             client -> emulator messaging
* iucvpipe::            iucvtrap <-> emulator messaging
* spool format::        Spool file format
* netdata::             Implemented NETDATA features
* emulator logics::     Details of emulator logics


File: funetnje.info,  Node: directories,  Next: cmdpipe,  Up: Nuts and Bolts

Directory structure of the FUNET-NJE
====================================


File: funetnje.info,  Node: cmdpipe,  Next: iucvpipe,  Prev: directories,  Up: Nuts and Bolts

Client to Emulator messaging
============================


File: funetnje.info,  Node: iucvpipe,  Next: spool format,  Prev: cmdpipe,  Up: Nuts and Bolts

IUCVTRAP <=> Emulator messaging
===============================


File: funetnje.info,  Node: spool format,  Next: netdata,  Prev: iucvpipe,  Up: Nuts and Bolts

FUNET-NJE Spool Format
======================


File: funetnje.info,  Node: netdata,  Next: emulator logics,  Prev: spool format,  Up: Nuts and Bolts

Implemented NETDATA features
============================


File: funetnje.info,  Node: emulator logics,  Prev: netdata,  Up: Nuts and Bolts

Emulator logics
===============



Tag Table:
Node: Top404
Node: Introduction1021
Node: BITNET-II4550
Node: Installation10259
Node: Configuration14826
Node: funetnje.cf15328
Node: file-exit.cf18412
Node: msg-exit.cf23089
Node: cmd-help.txt27326
Node: routes28840
Node: User programs30834
Node: qrdr31534
Node: receive31663
Node: sendfile31825
Node: send32011
Node: bitsend32191
Node: bitreceive32423
Node: ygone32592
Node: iucvtrap32796
Node: transfer33030
Node: System programs33194
Node: bmail33683
Node: mailify33867
Node: ucp34039
Node: njeroutes34207
Node: acctcat34393
Node: Interfacing mailer34585
Node: sendmail35047
Node: smail35267
Node: Zmailer38073
Node: Nuts and Bolts41437
Node: directories41944
Node: cmdpipe42099
Node: iucvpipe42255
Node: spool format42418
Node: netdata42563
Node: emulator logics42727

End Tag Table
