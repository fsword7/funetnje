	BUGS / Checkme / Missing features / TO-DO / Open Issues / ...

- Active open towards a JNET (OpenVMS) is problematic, it usually
  will abort immediately, and soon try itself to open connection to
  our end.   Log-browsing on the JNET seems to indicate that it
  receives invalid BCB sequence number, but there are no problems
  with  VM/SP, nor with FUNETNJE on Linux :-/  (950610)

  Possible explanation: JNET is broken :-(

- Timestamps on DEC OSF/1 AXP version do vary in mysterious ways.
  A set of files which in reality is transmitted at 25-35 kB/s
  gets reported as having been sent at the rate of 100-200 kB/s
  (The line allows 95 kB/s as theoretical max..)

  At the same time a similar set of files is sent from Linux 1.2.9
  to the DEC OSF/1, and those appear with correct speed indications..

- TeXinfo manual is in the begin -- docs are not complete
  Once it is done, release 3.0 is done.

- Line-oriented operator-commands should be per link NAME,
  not its number! ("Wasn't that link number 5 ?  Aargh...")

- bmail.c, et.al.: Have common library routine that will ensure
  that BITNET addresses follow strict 8+8 rule.
  (10 or so lines of code on each program now.)

- Message exits need to be implemented
   25-Jan-93: "first cut"..

- An "IUCVTRAP" mechanism is needed

- A cluster mode ?  (Esp. messages)
	Thinking as binding multiple machines into single NJE-node
	by allowing transparent NMR relaying.  File-spool is simple
	to share.

- send.c/io.c: need more complete tests on what user (even SU) has put
  on the 'sender address'..  A "send -u @ addr@somenode text" should not
  produce totally void NMR..

- bitsend/bitrcv to be brought up to date

- We need a transit-file trapping mechanism, not only for 1986 XMAS EXEC
  like things, but also for transit node processing in places which
  have for example one public NJE node, and a bunch of private ones..

- A tool to edit/create user ASCII <-> EBCDIC tables

- SYSIN exit program (even a sample one) needs to be written

- Better queue management -- when primary link to system X
  goes down, all files destined to it should be redirected
  to a POSSIBLE secondary link, and when the primary link
  comes back up again, files should be returned to it..
  (Gerald's idea:  link activation should do 'debug_rescan_queue()'..)
  Keep in mind the system non-performance when there are N-links, and
  M-files in queues..
	(Apr95:	Now file and link state information is kept in-core
		and such queue state-change initiated rescan happens
		FAST!)
  Link start-time automatic "debug rescan" appears to be a bit too much..
  (It frees the queue when link is started, however it could differ..)

- Route-finding is problematic, in some cases alternates are desirable,
  but loops in the database must be avoided -- or detected.
  A generic spanning-tree problem ?

- sendfile's usage() needs to be rewritten !  (about done, now man-pages..)

- Native Solaris 2.3 has no "select()" -- or rather the  select(2) is
  replaced with a select(3n) wrapper which calls  poll(2), later one is
  somewhat more versatile, but ah so cumbersome...
  Well, the code works with  "-lsocket -lnsl", but need to create a fully
  native system -- sleeker..
